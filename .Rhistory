#code and output not included in final file
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
```{r }
```{r }
#new dataframe with only erlotinib columns: 249 - 307 e=erlotinib
#e_treated <- NCI_TPW_gep_treated[,which(colnames(NCI_TPW_gep_treated) == grep ("erlotinib", colnames(NCI_TPW_gep_treated))]
e_treated <- NCI_TPW_gep_treated[, 249:307]
e_untreated <- NCI_TPW_gep_untreated[, 249:307]
#save as dataframe
e_treated <- as.data.frame(e_treated)
e_untreated <- as.data.frame(e_untreated)
library(GeneNet)
z.transform(e_foldchange)
#e_foldchange_z_transformed: treated-untreated + z-Transformation + PCA
e_foldchange <- e_treated - e_untreated
median_gene <- apply (e_foldchange, 1, function (x){
+ median(x) })
sd_gene <- apply(e_foldchange, 1, function (x){
+ sd(x) })
e_foldchange_z_transformed <- (e_folzdchange-median(median_gene)) / sd(sd_gene)
pca <- prcomp(e_foldchange_z_transformed)
plot(pca$rotation[,1], pca$rotation[,2], main = "z-transformed")
pca <- prcomp(e_foldchange)
plot(pca$rotation[,1], pca$rotation[,2], main = "foldchange")
#select cell lines with highest variance
var_cell_line <- apply(e_foldchange_z_transformed, 2, function (x) {
+ var(x)})
cell_line_var_greater_75quantile <- var_cell_line [which (var_cell_line > quantile(var_cell_line,0.75))]
cell_line_var_decreasing_top15 <- sort(cell_line_var_greater_75quantile, decreasing = TRUE)
table_cell_lines_var_top15 <- cbind(names(cell_line_var_decreasing_top15), cell_line_var_decreasing_top15)
rownames(table_cell_lines_var_top15) <- c(1:15)
colnames(table_cell_lines_var_top15) <- c("cell line", "variance")
#kable(): simple table formatting function
kable(table_cell_lines_var_top15)
#PCA visualization with factoextra package:
fviz_eig(pca) #shows percentage explained by each PC
fviz_pca_ind(pca, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
#PCA with transformed matrix (each dot represents a gene):
transformed_e_foldchange_z_transformed <- t(e_foldchange_z_transformed)
pca <- prcomp(transformed_erlotinib_normalized_z_transformed)
plot(pca$rotation[,1], pca$rotation[,2])
text(pca$rotation, labels = rownames(erlotinib_normalized_z_transformed), cex = 0.4, pos = 3)
#PCA visualization with factoextra package (according to www.sthda.com/english/articles/31-principal-component-methods-in-r-practical-guide/118-principal-component-analysis-in-t-prcomp-vs-princomp/) :
fviz_eig(pca) #shows percentage explained by each PC
#plot of cell lines with gradient colors by the quality of representation
fviz_pca_ind(pca, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
#plot of genes showing their contribution
fviz_pca_var(pca, col.var ="contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
#get contribution of genes to the PCs
results.genes <- get_pca_var(pca)
genes_pca_highest_contribution <- results.genes$contrib
CCLE_copynumber <- readRDS("C:/Users/Ann-Sophie/Documents/Studium/MoBi Heidelberg/4. Fachsemester/Bioinfo/Daten/basal molecular profiles/CCLE_copynumber.rds")
CCLE_mutations <- readRDS("C:/Users/Ann-Sophie/Documents/Studium/MoBi Heidelberg/4. Fachsemester/Bioinfo/Daten/basal molecular profiles/CCLE_mutations.rds")
load("~/Studium/MoBi Heidelberg/4. Fachsemester/Bioinfo/Daten/gene expression profiles/NCI_TPW_gep_treated.rds")
load("~/Studium/MoBi Heidelberg/4. Fachsemester/Bioinfo/Daten/R_first-analyses.R")
load("~/Studium/MoBi Heidelberg/4. Fachsemester/Bioinfo/Daten/gene expression profiles/NCI_TPW_gep_treated.rds")
```{r }
NCI_TPW_gep_treated <- readRDS(url("https://ndownloader.figshare.com/files/14720180?private_link=db1411debcfbe2618d2f"))
NCI_TPW_gep_untreated <- readRDS(url("https://ndownloader.figshare.com/files/14720183?private_link=db1411debcfbe2618d2f"))
NCI_TPW_metadata <- read.delim("https://ndownloader.figshare.com/files/14720186?private_link=db1411debcfbe2618d2f")
NegLogGI50 <- readRDS(url("https://ndownloader.figshare.com/files/14720210?private_link=074e0120fe5e682f3d14"))
CCLE_basalexpression <- readRDS(url("https://ndownloader.figshare.com/files/14770127?private_link=fc0c71246dc192982a3c"))
CCLE_copynumber <- readRDS(url("https://ndownloader.figshare.com/files/14770130?private_link=fc0c71246dc192982a3c"))
CCLE_mutations <- readRDS(url("https://ndownloader.figshare.com/files/14770133?private_link=fc0c71246dc192982a3c"))
cellline_annotation <-read.delim("https://ndownloader.figshare.com/files/14768981?private_link=efb6a529eaf2d4dc6432")
drug_annotation <- read.delim("https://ndownloader.figshare.com/files/14768984?private_link=efb6a529eaf2d4dc6432")
```
#new dataframe with only erlotinib columns: 249 - 307 e=erlotinib
#e_treated <- NCI_TPW_gep_treated[,which(colnames(NCI_TPW_gep_treated) == grep ("erlotinib", colnames(NCI_TPW_gep_treated))]
e_treated <- NCI_TPW_gep_treated[, 249:307]
e_untreated <- NCI_TPW_gep_untreated[, 249:307]
#save as dataframe
e_treated <- as.data.frame(e_treated)
e_untreated <- as.data.frame(e_untreated)
library(GeneNet)
z.transform(e_foldchange)
#e_foldchange_z_transformed: treated-untreated + z-Transformation + PCA
e_foldchange <- e_treated - e_untreated
median_gene <- apply (e_foldchange, 1, function (x){
+ median(x) })
sd_gene <- apply(e_foldchange, 1, function (x){
+ sd(x) })
e_foldchange_z_transformed <- (e_folzdchange-median(median_gene)) / sd(sd_gene)
pca <- prcomp(e_foldchange_z_transformed)
plot(pca$rotation[,1], pca$rotation[,2], main = "z-transformed")
pca <- prcomp(e_foldchange)
plot(pca$rotation[,1], pca$rotation[,2], main = "foldchange")
#select cell lines with highest variance
var_cell_line <- apply(e_foldchange_z_transformed, 2, function (x) {
+ var(x)})
cell_line_var_greater_75quantile <- var_cell_line [which (var_cell_line > quantile(var_cell_line,0.75))]
cell_line_var_decreasing_top15 <- sort(cell_line_var_greater_75quantile, decreasing = TRUE)
table_cell_lines_var_top15 <- cbind(names(cell_line_var_decreasing_top15), cell_line_var_decreasing_top15)
rownames(table_cell_lines_var_top15) <- c(1:15)
colnames(table_cell_lines_var_top15) <- c("cell line", "variance")
#kable(): simple table formatting function
kable(table_cell_lines_var_top15)
#PCA visualization with factoextra package:
fviz_eig(pca) #shows percentage explained by each PC
fviz_pca_ind(pca, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
#PCA with transformed matrix (each dot represents a gene):
transformed_e_foldchange_z_transformed <- t(e_foldchange_z_transformed)
pca <- prcomp(transformed_erlotinib_normalized_z_transformed)
plot(pca$rotation[,1], pca$rotation[,2])
text(pca$rotation, labels = rownames(erlotinib_normalized_z_transformed), cex = 0.4, pos = 3)
#PCA visualization with factoextra package (according to www.sthda.com/english/articles/31-principal-component-methods-in-r-practical-guide/118-principal-component-analysis-in-t-prcomp-vs-princomp/) :
fviz_eig(pca) #shows percentage explained by each PC
#plot of cell lines with gradient colors by the quality of representation
fviz_pca_ind(pca, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
#plot of genes showing their contribution
fviz_pca_var(pca, col.var ="contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
#get contribution of genes to the PCs
results.genes <- get_pca_var(pca)
genes_pca_highest_contribution <- results.genes$contrib
fold_changes <- NCI_TPW_gep_treated - NCI_TPW_gep_untreated
fold_changes <- as.data.frame(fold_changes)
drugs <- sapply(colnames(fold_changes), function(x){
#arr.ind array indices are returned(row and col), [2] because we want to know in which col
colnames(annotation_of_celllines_per_drug)[which(x == annotation_of_celllines_per_drug, arr.ind = TRUE)[2]]
})
cellline <- sapply(colnames(fold_changes), function(x){
colnames(annotation_sorted_by_cell_lines)[which(x == annotation_sorted_by_cell_lines, arr.ind = TRUE)[2]]
})
fold_changes <- rbind("Drug" = drugs, "Cellline" = cellline, fold_changes)
cancertype <- lapply(fold_changes[2, ], function(x){ #2nd row contains cellline annotation of samples
cellline_annotation$Cancer_type[cellline_annotation$Cell_Line_Name == x]
})
fold_changes <- rbind("Cancertype" = cancertype, fold_changes)
rm(drugs, cellline, cancertype)
View(fold_changes)
tail(fold_changes)
fold_changes <- NCI_TPW_gep_treated - NCI_TPW_gep_untreated
fold_changes <- as.data.frame(fold_changes)
#matrix annotation_of_celllines_per_drug contains all names
#of celllines treated with each drug in a column (15 drugs, each in a seperated column containing all celllines treated with that drug)
annotation_of_celllines_per_drug <- matrix(, nrow = 60, ncol = 0)
#to cbind all celllines of one drug in the annotation matrix, they need to have the same number of rows
#all columns are filled to 60 rows with "NA"s and before that the actual number of rows gets stored in length_without_NAs
length_without_NAs <- c()
for (i in 1:nrow(drug_annotation)){
columns_of_one_drug <- c(grep (drug_annotation$Drug[i], colnames(fold_changes), value = TRUE))
length_without_NAs <- c(length_without_NAs, length(columns_of_one_drug))
columns_of_one_drug <- c(columns_of_one_drug, rep(NA, 60-length(columns_of_one_drug)))
annotation_of_celllines_per_drug <- cbind (annotation_of_celllines_per_drug, columns_of_one_drug)
}
#sort annotation alphabetically
colnames(annotation_of_celllines_per_drug) <- drug_annotation$Drug
annotation_of_celllines_per_drug <- annotation_of_celllines_per_drug[, order(colnames(annotation_of_celllines_per_drug))]
length_without_NAs <- length_without_NAs[order(colnames(annotation_of_celllines_per_drug))]
#annotation of celllines (in columns 61 cell lines) treated with drugs (in rows 15 drugs)
annotation_sorted_by_cell_lines <- matrix(, nrow = 15, ncol = 0)
#Problem: name of cellline SK-MEL_2 is part of cellline SK-MEL_28
#Solution: rename SK-MEL_2 to SK-MEL_2_ (first define it as new factor level)
levels(cellline_annotation$Cell_Line_Name) <- c(levels(cellline_annotation$Cell_Line_Name), "SK-MEL_2_")
cellline_annotation[33, 1] <- "SK-MEL_2_"
#problem: grep does not find SK-MEL_2_ in colnames --> creates column of NAs instead of values in SK-MEL_2 column
length_without_NAs <- c()
for (i in 1:61){
columns_of_one_cell_line <- c(grep (cellline_annotation$Cell_Line_Name[i], colnames(fold_changes), value = TRUE))
length_without_NAs <- c(length_without_NAs, length(columns_of_one_cell_line))
columns_of_one_cell_line <- c(columns_of_one_cell_line, rep(NA, 15-length(columns_of_one_cell_line)))
annotation_sorted_by_cell_lines <- cbind (annotation_sorted_by_cell_lines, columns_of_one_cell_line)
}
colnames(annotation_sorted_by_cell_lines) <- cellline_annotation$Cell_Line_Name
#add drug, cellline and cancertype annotation in FC
drugs <- sapply(colnames(fold_changes), function(x){
#arr.ind array indices are returned(row and col), [2] because we want to know in which col
colnames(annotation_of_celllines_per_drug)[which(x == annotation_of_celllines_per_drug, arr.ind = TRUE)[2]]
})
cellline <- sapply(colnames(fold_changes), function(x){
colnames(annotation_sorted_by_cell_lines)[which(x == annotation_sorted_by_cell_lines, arr.ind = TRUE)[2]]
})
fold_changes <- rbind("Drug" = drugs, "Cellline" = cellline, fold_changes)
cancertype <- lapply(fold_changes[2, ], function(x){ #2nd row contains cellline annotation of samples
cellline_annotation$Cancer_type[cellline_annotation$Cell_Line_Name == x]
})
fold_changes <- rbind("Cancertype" = cancertype, fold_changes)
rm(drugs, cellline, cancertype)
tail(fold_changes)
e_foldchange_z_transfrom = scale(e_foldchange)
mean(e_foldchange_z_transfrom)
mean(e_foldchange)
e_treated <- NCI_TPW_gep_treated[, 249:307]
e_untreated <- NCI_TPW_gep_untreated[, 249:307]
e_foldchange <- e_treated - e_untreated
mean(e_foldchange)
e_foldchange_z_transfrom = scale(e_foldchange)
mean(e_foldchange_z_transfrom)
e_foldchange_z_transfrom = log10(e_foldchange)
e_foldchange_z_transfrom = scale(e_foldchange_z_transfrom)
mean(e_foldchange_z_transfrom)
e_foldchange_z_transfrom <- dnorm(e_foldchange)
mean(e_foldchange_z_transfrom)
plot(density, e_foldchange_z_transfrom)
plot(density(e_foldchange_z_transfrom))
sd(e_foldchange_z_transfrom)
sd(e_foldchange)
plot(density(e_foldchange))
e_foldchange_z_transfrom <- dnorm(e_foldchange, mean = 0, sd = 1, log = FALSE)
mean(e_foldchange_z_transfrom)
e_foldchange_scale <- function(x) {
scale(e_foldchange, scale = FALSE)
}
mean(e_foldchange_scale())
e_foldchange_scale <- function(x) {
scale(e_foldchange, scale = TRUE)
}
mean(e_foldchange_scale
)
mean(e_foldchange_scale)
center_scale <- function(x) {
scale(x, scale = FALSE)
}
e_foldchange_scale <- center_scale(e_foldchange)
mean(e_foldchange_scale)
var(e_foldchange_scale)
center_scale <- function(x) {
scale(x, scale = TRUE)
}
e_foldchange_scale <- center_scale(e_foldchange)
mean(e_foldchange_scale)
center_mean <- function(x) {
ones = rep(1, nrow(x))
x_mean = ones %*% t(colMeans(x))
x - x_mean
}
e_foldchange_center_mean <- center_mean(e_foldchange)
mean(e_foldchange_center_mean)
plot(density(e_foldchange_center_mean))
plot(density(e_foldchange))
sd(e_foldchange_center_mean)
sd(e_foldchange_scale)
cell_line_var_greater_75quantile <- sort (var_cell_line [which (var_cell_line > quantile(var_cell_line,0.75))], decreasing = TRUE)
var_cell_line <- apply(e_foldchange_z_transformed, 2, function (x) {
+ var(x)})
var_cell_line <- apply(e_foldchange, 2, function (x) {
+ var(x)})
cell_line_var_greater_75quantile <- sort (var_cell_line [which (var_cell_line > quantile(var_cell_line,0.75))], decreasing = TRUE)
cell_line_var_greater_75quantile
cell_line_var_greater_75quantile <- var_cell_line [which (var_cell_line > quantile(var_cell_line,0.75))]
cell_line_var_greater_75quantile
cell_line_var_greater_75quantile <- sort(var_cell_line [which (var_cell_line > quantile(var_cell_line,0.75))], decreasing = TRUE)
cell_line_var_greater_75quantile
table_cell_lines_var_top15 <- cbind(names(cell_line_var_greater_75quantile), cell_line_var_greater_75quantile)
rownames(table_cell_lines_var_top15) <- c(1:15)
colnames(table_cell_lines_var_top15) <- c("cell line", "variance")
View(table_cell_lines_var_top15)
table_cell_lines_var_top15 <- cbind(names(cell_line_var_greater_75quantile), cell_line_var_greater_75quantile)
rownames(table_cell_lines_var_top15) <- c(1:nrow(table_cell_lines_var_top15))
colnames(table_cell_lines_var_top15) <- c("cell line", "variance")
View(table_cell_lines_var_top15)
#PCA of foldchange of genes
pca <- prcomp(e_foldchange_z_transformed)
plot(pca$rotation[,1], pca$rotation[,2], main = "foldchange")
#PCA visualization with factoextra package:
fviz_eig(pca) #shows percentage explained by each PC
fviz_pca_ind(pca, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
#PCA of foldchange of genes
pca <- prcomp(e_foldchange)
plot(pca$rotation[,1], pca$rotation[,2], main = "foldchange")
#PCA visualization with factoextra package:
fviz_eig(pca) #shows percentage explained by each PC
fviz_pca_ind(pca, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
install.packages("factoextra")
#PCA of foldchange of genes
pca <- prcomp(e_foldchange)
plot(pca$rotation[,1], pca$rotation[,2], main = "foldchange")
#PCA visualization with factoextra package:
fviz_eig(pca) #shows percentage explained by each PC
fviz_pca_ind(pca, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
install.packages("factoextra")
#PCA of foldchange of genes
pca <- prcomp(e_foldchange)
plot(pca$rotation[,1], pca$rotation[,2], main = "foldchange")
#PCA visualization with factoextra package:
fviz_eig(pca) #shows percentage explained by each PC
fviz_pca_ind(pca, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
library(factoextra)
#PCA of foldchange of genes
pca <- prcomp(e_foldchange)
plot(pca$rotation[,1], pca$rotation[,2], main = "foldchange")
#PCA visualization with factoextra package:
fviz_eig(pca) #shows percentage explained by each PC
fviz_pca_ind(pca, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
transformed_e_foldchange_z_transformed <- t(e_foldchange_z_transformed)
pca <- prcomp(transformed_erlotinib_normalized_z_transformed)
plot(pca$rotation[,1], pca$rotation[,2])
text(pca$rotation, labels = rownames(erlotinib_normalized_z_transformed), cex = 0.4, pos = 3)
#PCA visualization with factoextra package (according to www.sthda.com/english/articles/31-principal-component-methods-in-r-practical-guide/118-principal-component-analysis-in-t-prcomp-vs-princomp/) :
fviz_eig(pca) #shows percentage explained by each PC
#plot of cell lines with gradient colors by the quality of representation
fviz_pca_ind(pca, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
#plot of genes showing their contribution
fviz_pca_var(pca, col.var ="contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
#get contribution of genes to the PCs
results.genes <- get_pca_var(pca)
genes_pca_highest_contribution <- results.genes$contrib
e_foldchange_z_transformed <- (e_foldchange-median(median_gene)) / sd(sd_gene)
var_cell_line <- apply(e_foldchange_z_transformed, 2, function (x) {
+ var(x)})
cell_line_var_greater_75quantile <- sort(var_cell_line [which (var_cell_line > quantile(var_cell_line,0.75))], decreasing = TRUE)
rm(var_cell_line)
e_foldchange_matrix_transformed <- t(e_foldchange_z_transformed)
pca <- prcomp(e_foldchange_matrix_transformed)
plot(pca$rotation[,1], pca$rotation[,2])
text(pca$rotation, labels = rownames(e_foldchange_z_transformed), cex = 0.4, pos = 3)
fviz_eig(pca)
fviz_pca_ind(pca, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
fviz_pca_var(pca, col.var ="contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
results.genes <- get_pca_var(pca)
genes_pca_highest_contribution <- results.genes$contrib
genes_pca_highest_contribution
#matrix annotation_of_celllines_per_drug contains all names
#of celllines treated with each drug in a column (15 drugs, each in a seperated column containing all celllines treated with that drug)
annotation_of_celllines_per_drug <- matrix(, nrow = 60, ncol = 0)
#to cbind all celllines of one drug in the annotation matrix, they need to have the same number of rows
#all columns are filled to 60 rows with "NA"s and before that the actual number of rows gets stored in length_without_NAs
length_without_NAs <- c()
for (i in 1:nrow(drug_annotation)){
columns_of_one_drug <- c(grep (drug_annotation$Drug[i], colnames(fold_changes), value = TRUE))
length_without_NAs <- c(length_without_NAs, length(columns_of_one_drug))
columns_of_one_drug <- c(columns_of_one_drug, rep(NA, 60-length(columns_of_one_drug)))
annotation_of_celllines_per_drug <- cbind (annotation_of_celllines_per_drug, columns_of_one_drug)
}
colnames(annotation_of_celllines_per_drug) <- drug_annotation$Drug
annotation_of_celllines_per_drug <- annotation_of_celllines_per_drug[, order(colnames(annotation_of_celllines_per_drug))]
length_without_NAs <- length_without_NAs[order(colnames(annotation_of_celllines_per_drug))]
#annotation of celllines (in columns 61 cell lines) treated with drugs (in rows 15 drugs)
annotation_sorted_by_cell_lines <- matrix(, nrow = 15, ncol = 0)
Problem: name of cellline SK-MEL_2 is part of cellline SK-MEL_28
#Solution: rename SK-MEL_2 to SK-MEL_2_ (first define it as new factor level)
levels(cellline_annotation$Cell_Line_Name) <- c(levels(cellline_annotation$Cell_Line_Name), "SK-MEL_2_")
cellline_annotation[33, 1] <- "SK-MEL_2_"
#problem: grep does not find SK-MEL_2_ in colnames --> creates column of NAs instead of values in SK-MEL_2 column
length_without_NAs <- c()
for (i in 1:61){
columns_of_one_cell_line <- c(grep (cellline_annotation$Cell_Line_Name[i], colnames(fold_changes), value = TRUE))
length_without_NAs <- c(length_without_NAs, length(columns_of_one_cell_line))
columns_of_one_cell_line <- c(columns_of_one_cell_line, rep(NA, 15-length(columns_of_one_cell_line)))
annotation_sorted_by_cell_lines <- cbind (annotation_sorted_by_cell_lines, columns_of_one_cell_line)
}
colnames(annotation_sorted_by_cell_lines) <- cellline_annotation$Cell_Line_Name
#add drug, cellline and cancertype annotation in FC
drugs <- sapply(colnames(fold_changes), function(x){
#arr.ind array indices are returned(row and col), [2] because we want to know in which col
colnames(annotation_of_celllines_per_drug)[which(x == annotation_of_celllines_per_drug, arr.ind = TRUE)[2]]
})
cellline <- sapply(colnames(fold_changes), function(x){
colnames(annotation_sorted_by_cell_lines)[which(x == annotation_sorted_by_cell_lines, arr.ind = TRUE)[2]]
})
fold_changes <- rbind("Drug" = drugs, "Cellline" = cellline, fold_changes)
cancertype <- lapply(fold_changes[2, ], function(x){ #2nd row contains cellline annotation of samples
cellline_annotation$Cancer_type[cellline_annotation$Cell_Line_Name == x]
})
fold_changes <- rbind("Cancertype" = cancertype, fold_changes)
rm(drugs, cellline, cancertype)
View(fold_changes)
colnames(NCI_TPW_gep_treated) == grep ("erlotinib", colnames(NCI_TPW_gep_treated))
grep ("erlotinib", colnames(NCI_TPW_gep_treated)
)
e_treated <- NCI_TPW_gep_treated[,which(grep ("erlotinib", colnames(NCI_TPW_gep_treated))]
e_treated <- NCI_TPW_gep_treated[,which(grep ("erlotinib", colnames(NCI_TPW_gep_treated)))]
e_treated <- NCI_TPW_gep_treated[,grep ("erlotinib", colnames(NCI_TPW_gep_treated))]
e_treated
View(e_treated)
#new dataframe with only erlotinib columns: 249 - 307 e=erlotinib
e_treated <- NCI_TPW_gep_treated[,grep ("erlotinib", colnames(NCI_TPW_gep_treated))]
e_untreated <- NCI_TPW_gep_untreated[,grep ("erlotinib", colnames(NCI_TPW_gep_untreated))]
e_fodchange <- e_treated - e_untreated
e_foldchange <- e_treated - e_untreated
e_foldchange <- e_treated - e_untreated
rm(e_fodchange)
# Make a basic volcano plot
with(e_foldchange, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
with(subset(e_foldchange, padj<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(subset(e_foldchange, abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="orange"))
with(subset(e_foldchange, padj<.05 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="green"))
install.packages("COBRA")
libar(cobra)
library(COBRA)
# Make a basic volcano plot
with(e_foldchange, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
with(subset(e_foldchange, padj<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(subset(e_foldchange, abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="orange"))
with(subset(e_foldchange, padj<.05 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="green"))
install.packages("ggplot2")
librar(ggplot())
library(ggplot2)
# Make a basic volcano plot
with(e_foldchange, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
with(subset(e_foldchange, padj<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(subset(e_foldchange, abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="orange"))
with(subset(e_foldchange, padj<.05 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="green"))
e_treated_mean_over_cell_lines <- sapply(e_treated), function(x){
rowMeans(e_treated)}
e_treated_mean_over_cell_lines <- rowMeans(e_treated)
head(e_treated_mean_over_cell_lines)
e_treated_mean_over_cell_lines <- rowMeans(e_treated)
e_untreated_mean_over_cell_lines <- rowMeans(e_untreated)
e_foldchange_mean_over_cell_lines <- e_treated_mean_over_cell_lines - e_untreated_mean_over_cell_lines
e_foldchange_mean2 <- rowMeans(e_foldchange)
head(e_foldchange_mean2)
head(e_foldchange_mean_over_cell_lines)
p-values <- t.test(e_treated_mean_over_cell_lines, e_untreated_mean_over_cell_lines)
p_values <- t.test(e_treated_mean_over_cell_lines, e_untreated_mean_over_cell_lines)
View(p_values)
p_values[["p.value"]]
View(p_values)
p_values[["statistic"]]
e_treated_mean_over_cell_lines[2]
p_values <- sapply(1:nrow(e_treated_mean_over_cell_lines, function(x) {
t.test(e_treated_mean_over_cell_lines[x], e_untreated_mean_over_cell_lines[x])})
p_values <- sapply(1:nrow(e_treated_mean_over_cell_lines, function(x) {
t.test(e_treated_mean_over_cell_lines[x], e_untreated_mean_over_cell_lines[x])})
p_values <- sapply(1:nrow(e_treated_mean_over_cell_lines), function(x) {
t.test(e_treated_mean_over_cell_lines[x], e_untreated_mean_over_cell_lines[x])})
p_values <- sapply(1:length(e_treated_mean_over_cell_lines), function(x) {
t.test(e_treated_mean_over_cell_lines[x], e_untreated_mean_over_cell_lines[x])})
p_values <- sapply(1:length(e_treated_mean_over_cell_lines), function(x) {
t.test(e_treated_mean_over_cell_lines[x], e_untreated_mean_over_cell_lines[x])})
length(e_treated_mean_over_cell_lines)
View(p_values)
p_values <- sapply(1:length(e_treated_mean_over_cell_lines), function(x) {
t.test(e_treated_mean_over_cell_lines[x], e_untreated_mean_over_cell_lines[x])$p.value})
p_values <- sapply(1:length(e_treated_mean_over_cell_lines), function(x) {
t.test(e_treated_mean_over_cell_lines[x], e_untreated_mean_over_cell_lines[x])})
p_values <- lapply(1:length(e_treated_mean_over_cell_lines), function(x) {
+   t.test(e_treated_mean_over_cell_lines[x], e_untreated_mean_over_cell_lines[x])$p.value})
t.test(e_treated_mean_over_cell_lines[1], e_untreated_mean_over_cell_lines[1])$p.value
p-value <- t.test(e_treated_mean_over_cell_lines[1], e_untreated_mean_over_cell_lines[1])$p.value
p-value <- t.test(e_treated_mean_over_cell_lines[1], e_untreated_mean_over_cell_lines[1])$statistics
e_treated_mean_over_cell_lines[1]
e_untreated_mean_over_cell_lines[1]
save.image("~/Studium/MoBi Heidelberg/4. Fachsemester/Bioinfo/Daten/github/Graphen/environement.RData")
